<?xml version="1.0" ?>

<!--
    Escape Characters
    "   &quot;
    '   &apos;
    <   &lt;
    >   &gt;
    &   &amp;
    \n  &#10;
    \t  &#x9;
-->

<verilog>
    <module>module $comp_name(&#10;$signals&#10;&#x9;);&#10;&#10;$portDef&#10;&#10;$arch&#10;endmodule</module>

    <signalDeclaration>$sig_name</signalDeclaration>
    <portDeclaration>$modeput $size $name;</portDeclaration>
    <intSigDeclaration>reg $int_sig_type $int_sig_name;</intSigDeclaration>
    <architecture>$int_sig_declaration&#10;&#10;$arch_elements</architecture>
    <stateNamesDeclarations>parameter $stateName = $bits;</stateNamesDeclarations>
    <arrayPackage>-- Package&#10;library ieee;&#10;use ieee.std_logic_1164.all;&#10;use ieee.numeric_std.all;&#10;package arrayPackage is&#10;$arrays&#10;$Component&#10;end arrayPackage;&#10;package body arrayPackage is&#10;end arrayPackage;&#10;&#10;</arrayPackage>
    <arrayType>type $arrayName is array($arraySize downto 0) of $signalType($arrayLength downto 0);&#10;</arrayType>
    <process>always @($input_signals)&#10;begin : $process_label$default_assignments&#10;end</process>
    <ifStatement>&#10;&#x9;if ( $assignment == 1'b$lvl )&#10;&#x9;&#x9;begin$default_assignments&#10;&#x9;&#x9;end&#10;&#x9;$else</ifStatement>
    <elseStatement>else&#10;&#x9;&#x9;begin$default_assignments&#10;&#x9;&#x9;end</elseStatement>
    <elsifStatement>elsif $edge(clk) then&#10;$default_assignments</elsifStatement>
    <clkIfStatement>if (clk) then&#10;$default_assignments&#x9;end if;</clkIfStatement>
    <caseCopy>&#x9;case ( $stateType )&#10;</caseCopy>
    <case>&#x9;case ( $stateType )$whenCase&#10;&#x9;&#x9;default :&#10;&#x9;&#x9;&#x9;begin&#10;&#10;&#x9;&#x9;&#x9;end&#10;&#x9;endcase</case>
    <sigAssign>$output_signal = $value;</sigAssign>
    <processAssign>$output_signal = $value;</processAssign>
    <portAssign>.$output_signal ($value)</portAssign>
    <concurrentstmt>assign $statement&#10;</concurrentstmt>
    <instance>$instance $instance_label&#10;(&#10;$portAssign&#10;&#x9;);</instance>
    <component>component $model is&#10;port(&#10;$ports&#10;);&#10;end component $model; </component>
    <note>/// $notes&#10;</note>
    <concNote>/// assign $output_signal = $notes;</concNote>

</verilog>