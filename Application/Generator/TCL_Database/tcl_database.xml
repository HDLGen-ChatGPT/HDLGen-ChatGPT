<?xml version="1.0" ?>

<!--
    Escape Characters
    "   &quot;
    '   &apos;
    <   &lt;
    >   &gt;
    &   &amp;
    \n  &#10;
    \t  &#x9;
-->
<tcl>
    <vivado_vhdl_tcl>
        # AMD-Xilinx Vivado project start and tcl script: Create project, xc7z020clg400-1 technology, %lang model &#10;
        # To execute, &#10;
        # open cmd window &#10;
        # cd to project folder &#10;
        # start Vivado (with tcl file parameter) &#10;
        # e.g, for project name $proj_name &#10;
        # cmd &#10;
        # cd $proj_dir &#10;
        # $vivado_bat_path -source $tcl_path &#10;

        # Vivado tcl file $proj_name.tcl, created in AMDprj folder &#10;
        cd $proj_dir &#10;
        # Close_project  Not required. Will advise that Vivado sessions should be closed. &#10;
        start_gui&#10;
        create_project  $proj_name  ./$lang/AMDprj -part xc7z020clg400-1 -force&#10;
        set_property target_language $lang [current_project]&#10;
        add_files -norecurse  ./$lang/model/$comp_name.$ext&#10;$arrayPackage&#10;$files&#10;
        update_compile_order -fileset sources_1&#10;
        set_property SOURCE_SET sources_1 [get_filesets sim_1]&#10;
        add_files -fileset sim_1 -norecurse ./$lang/testbench/$tb_name.$ext&#10;
        update_compile_order -fileset sim_1&#10;
        # Remove IOBs from snthesised schematics&#10;
        current_run [get_runs synth_1]&#10;
        set_property -name {STEPS.SYNTH_DESIGN.ARGS.MORE OPTIONS} -value -no_iobuf -objects [get_runs synth_1]&#10;

        # Save created wcfg in project&#10;
        set_property SOURCE_SET sources_1 [get_filesets sim_1]&#10;
        add_files -fileset sim_1 -norecurse ./$lang/AMDprj/$tb_name_behav.wcfg&#10;
        # save_wave_config {./$lang/AMDprj/$tb_name_behav.wcfg}&#10;
    </vivado_vhdl_tcl>
    <quartus_tcl>
        # Assume that the quartus executable pointer has been setup in the HDLGen settings&#10;
        # e.g, Quartus installation folder is &#10;
        #   C:\intelFPGA_lite\22.1std\quartus\bin64\&#10;
        # Quartus executable quartus.exe&#10;

        # If click HDLGen 'Generate / Open Quartus &#10;
        # Execute this tcl file using &#10;
        #   C:\intelFPGA_lite\22.1std\quartus\bin64\quartus_map $comp_name.tcl&#10;

        # Assume &#10;
        #   Quartus project $comp_name.qpf&#10;
        #   Folder $proj_dirC:\2023\vicilogic\HDLGenTop\HDLGen\User_Projects\sequential\counters\$comp_name\$lang\Intelprj&#10;

        # To synthesise the HDL model, after executing this tcl file, open the project in Quartus, run the following&#10;
        #   C:\intelFPGA_lite\22.1std\quartus\bin64\quartus.exe CB4CLED.qpf&#10;
        # The user can then synthesise the design using menu Project > Start compilation (or shortcut ctrl/L)&#10;
        # or use GUI Tools > Green arrow function "Start Analysis and Synthesis" or shortcut (ctrl/K)&#10;

        # Copyright (C) 2023  Intel Corporation. All rights reserved.&#10;
        # Your use of Intel Corporation's design tools, logic functions &#10;
        # and other software and tools, and any partner logic &#10;
        # functions, and any output files from any of the foregoing &#10;
        # (including device programming or simulation files), and any &#10;
        # associated documentation or information are expressly subject &#10;
        # to the terms and conditions of the Intel Program License &#10;
        # Subscription Agreement, the Intel Quartus Prime License Agreement,&#10;
        # the Intel FPGA IP License Agreement, or other applicable license&#10;
        # agreement, including, without limitation, that your use is for&#10;
        # the sole purpose of programming logic devices manufactured by&#10;
        # Intel and sold by Intel or its authorized distributors.  Please&#10;
        # refer to the applicable agreement for further details, at&#10;
        # https://fpgasoftware.intel.com/eula.&#10;

        # Quartus Prime: Generate Tcl File for Project&#10;

        # Load Quartus Prime Tcl Project package&#10;
        package require ::quartus::project0&#10;
        set need_to_close_project 0&#10;

        project create $comp_name&#10;
        project open $comp_name&#10;

        set make_assignments 1&#10;

        # Make assignments&#10;
        if {$make_assignments} {&#10;
            set_global_assignment -name FAMILY "Cyclone V"&#10;
            set_global_assignment -name DEVICE 5CSEBA6U23I7&#10;
            set_global_assignment -name ORIGINAL_QUARTUS_VERSION 22.1STD.1&#10;
            set_global_assignment -name PROJECT_CREATION_TIME_DATE "08:49:38  MAY 02, 2023"&#10;
            set_global_assignment -name LAST_QUARTUS_VERSION "22.1std.1 Lite Edition"&#10;
            set_global_assignment -name $lang_FILE ../model/$comp_name.$ext&#10;
            set_global_assignment -name $lang_FILE ../../../../../../Package/MainPackage.vhd&#10;
            set_global_assignment -name PROJECT_OUTPUT_DIRECTORY output_files&#10;
            set_global_assignment -name MIN_CORE_JUNCTION_TEMP "-40"&#10;
            set_global_assignment -name MAX_CORE_JUNCTION_TEMP 100&#10;
            set_global_assignment -name ERROR_CHECK_FREQUENCY_DIVISOR 256&#10;
            set_global_assignment -name EDA_SIMULATION_TOOL "Questa Intel FPGA ($lang)"&#10;
            set_global_assignment -name EDA_TIME_SCALE "1 ps" -section_id eda_simulation&#10;
            set_global_assignment -name EDA_OUTPUT_DATA_FORMAT VHDL -section_id eda_simulation&#10;
            set_global_assignment -name EDA_GENERATE_FUNCTIONAL_NETLIST OFF -section_id eda_board_design_timing&#10;
            set_global_assignment -name EDA_GENERATE_FUNCTIONAL_NETLIST OFF -section_id eda_board_design_symbol&#10;
            set_global_assignment -name EDA_GENERATE_FUNCTIONAL_NETLIST OFF -section_id eda_board_design_signal_integrity&#10;
            set_global_assignment -name EDA_GENERATE_FUNCTIONAL_NETLIST OFF -section_id eda_board_design_boundary_scan&#10;
        }&#10;

            # Commit assignments&#10;
            export_assignments&#10;
    </quartus_tcl>
</tcl>