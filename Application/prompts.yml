vhdlchatgptmodel: | 
    ~ Notes START ===============
    ~ "~" is comment line prefix
    
    ~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.
    ~ The prompt includes the following sections
    ~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT
    ~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.
    ~ Each prompt has an accompanying explanation (in a comment)
    ~ Prompts are included which request generate of specific code output
    ~ Prompts are included which request avoidance of generating specific code output
    ~ b) HDL model template, generated by HDLGen-ChatGPT.
    
    ~ 2. The VHDL model template includes the following sections:
    ~ Title (creation date, component name, description, creator details, signal dictionary)
    ~ VHDL library declarations, including IEEE 1164 (VHDL) libraries, IEEE.numeric_std library and a MainPackage library, located in the project environment folder.
    ~ VHDL entity declaration, describing input and output signals and their signal types
    ~ VHDL architecture
    ~ Internal signal declarations
    ~ Component declarations, if the design references hierarchical components
    ~ VHDL processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
    ~ VHDL component instantiations, if the design is hierarchical
    ~ VHDL concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
    
    ~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5
    ~ Later (subscription-based) GPT releases are expected to produce similar or better quality results
    ~ Note that ChatGPT does not always generate output exactly as expected
    
    ~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix
    
    ~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output
    ~ Examples:
    ~ Enter 'continue' to continue incomplete output to a code box
    ~ Click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
    ~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow
    ~ Type a new prompt in the ChatGPT message box and click the arrow
    ~ Notes END    ===============
    
    ~ Main prompt to ChatGPT
    Complete the following VHDL model, and output in a single formatted code box.
    
    ~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the VHDL model template.
    ~ In HDLGen-ChatGPT 'Generate > Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.
    ~***Reserved for processes***
    ~***Reserved for concurrent statements***
    
    ~ Retain VHDL comments unchanged
    Do not remove any comments beginning with '-- ', i.e, only two dashes
    
    ~ Enhance the title section text, e.g, align and format text
    ~ Remove/add the comment (~) character on the next two lines, to activate/deactivate.
    ~ Deactivation speeds up the ChatGPT HDL model completion, by removing the title section generation.
    ~ Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
    For each line between -- Title section start and -- Title section end, improve the text formatting
    
    Do not merge separate assignments included within a process.
    
    For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
    ~ Translate model combination logic pseudo code lines which include the '---' prefix to syntactically-correct HDL.
    Remove the '--- '  prefix from the line.
    ~ Remove the --- after processing.
    
    For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
    For all +, -, *, / operations, ensure correct signal type conversion.
    ~ If ChatGPT generates addOut <= addin1 + addIn0;  for std_logic_vector signals, the EDA tool may highlight an error,
    ~  such as 'Cannot determine exact overloaded match definition for "+"'
    ~ If so, re-run the above prompt
    ~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
    ~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
    ~ + function supports the following overloaded operations
    ~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
    ~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
    ~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
    ~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
    ~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
    ~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
    ~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
    ~  Uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
    ~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
    
    The following example is unnecessarilu complicated.
    sourceDByte <= BRAM_dOut(to_integer(unsigned(CSXAdd) + 7) downto to_integer(unsigned(CSXAdd)));,
    where sourceDByte and BRAM_dOut are type std_logic_vector, and signal CSXAdd is type integer.
    The assignment should be sourceDByte <= BRAM_dOut(8*CSXAdd+7 downto CSXAdd );.
    It is not necessary to convert CSXAdd integer type to integer using to_integer(unsigned(CSXAdd).
    Apply this rule when generating VHDL.
    
    Do not unnecessarily convert integer type signals to unsigned type and then integer type.
    
    If an assignment includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
    ~ If using a std_logic_vector signal as an integer index, convert (type cast) the signal to unsigned type,
    ~ and the unsigned signal to integer type (TO_INTEGER function D.1) and use as integer array index
    ~ -- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
    ~ -- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
    ~ -- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
    ~ -- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
    ~ -- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
    ~ -- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
    ~ -- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
    ~ -- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
    
    Convert shift_left and shift_right function outputs to signal type std_logic_vector.
    ~ Bit shift handling
    ~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify the above line.
    Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
    ~ Self-explanatory
    If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
    ~ Use >>> pseudo code operator for shift right arithmetic operation. VHDL functions require signed input signals.
    
    Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
    Make assignment and equality check bit widths compatible.
    ~ Self-explanatory
    
    Leave all labels unchanged.
    ~ HDLGen-ChatGPT captures the labels for the design processes, concurrent statements and component instantiation.
    ~ Labels are used for browsing the design in the EDA tools.
    
    For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, and remove any occurrence of '-- Default assignment'
    
    Remove all assignments in if or case statements which duplicate the default assignment.
    Include null in others case statement if a default assignment is included in a case statement
    ~ HDLGen-ChatGPT 'Architecture > process' menu uses the following menus and combinational process logic description approach
    ~ default signal assignment
    ~ non-default signal assignment
    ~ The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
    
    For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
    ~ VHDL syntax requirement
    
    Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
    ~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
    
    In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1 and do not use double quotes "".
    For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
    ~ Extending a signal
    ~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB)); where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
    
    Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
    ~ Self explanatory
    
    Only use VHDL which is support by the IEEE VHDL-1987 standard.
    ~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987 standard
    
    In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
    ~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
    ~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
    
    For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.
verilogchatgptmodel: |
    ~ Notes START ===============
    ~ "~" is comment line prefix
    
    ~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.
    ~ The prompt includes the following sections
    ~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT
    ~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.
    ~ Each prompt has an accompanying explanation (in a comment)
    ~ Prompts are included which request generate of specific code output
    ~ Prompts are included which request avoidance of generating specific code output
    ~ b) HDL model template, generated by HDLGen-ChatGPT.
    
    ~ 2. The Verilog model template includes the following sections:
    ~ Title (creation date, component name, description, creator details, signal dictionary)
    ~ Verilog module declaration, describing input and output signals and their signal types
    ~ Verilog architecture
    ~ Internal signal declarations
    ~ Verilog always statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation
    ~ Verilog component instantiations, if the design is hierarchical
    ~ Verilog assign statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation
    
    ~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5
    ~ Later (subscription-based) GPT releases are expected to produce similar or better quality results
    ~ Note that ChatGPT does not always generate output exactly as expected
    
    ~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix
    
    ~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output
    ~ Examples:
    ~ Enter 'continue' to continue incomplete output to a code box
    ~ Click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
    ~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow
    ~ Type a new prompt in the ChatGPT message box and click the arrow
    ~ Notes END    ===============
    
    ~ Main prompt to ChatGPT
    Complete the following Verilog model, and output in a single formatted code box.
    
    ~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the Verilog model template.
    ~ In HDLGen-ChatGPT 'Generate > Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.
    ~***Reserved for processes***
    ~***Reserved for concurrent statements***
    
    For each line between // Title section start and // Title section end, improve formatting of the text.
    
    Do not include input or output keywords in the module declaration
    
    For each line containing the prefix '///', generate Verilog code describing the logic, applying the following rules.
    ~ Translate model combination logic pseudo code lines which include the '///' prefix to syntactically-correct HDL.
    Remove the '/// '  prefix from the line.
    ~ Remove the /// after processing.
    
    Leave all labels unchanged.
    ~ Labels are used for browsing the design in the EDA tools.
    
    In initial statements, place the Verilog line containing '// Default assignment', unchanged, and immediately before the Verilog logic generated for lines containing prefix '///'.
    ~ self-explanatory
    
    Do not include an initial statement for a signal, if an assign statement is included in the Verilog model template.
    ~ For each assign statement, generate a Verilog assign statement, remove '// Default assignment' if it exists.
    
    In VERILOG initial statements, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
    Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
    
    Make assignment and equality check bit widths compatible.
    
    Only use Verilog which is supported by the Verilog-1995 (IEEE Standard 1364-1995) standard.
    
    Keep all { and } characters in the generated Verilog
    
    Keep case assignments separate, as specified in the ChatGPT prompt.
    
    For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
    
    Remove all lines which contain default:
vhdlchatgptmodelreset: |
    ~ Notes START ===============
    ~ "~" is comment line prefix
    
    ~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.
    ~ The prompt includes the following sections
    ~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT
    ~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.
    ~ Each prompt has an accompanying explanation (in a comment)
    ~ Prompts are included which request generate of specific code output
    ~ Prompts are included which request avoidance of generating specific code output
    ~ b) HDL model template, generated by HDLGen-ChatGPT.
    
    ~ 2. The VHDL model template includes the following sections:
    ~ Title (creation date, component name, description, creator details, signal dictionary)
    ~ VHDL library declarations, including IEEE 1164 (VHDL) libraries, IEEE.numeric_std library and a MainPackage library, located in the project environment folder.
    ~ VHDL entity declaration, describing input and output signals and their signal types
    ~ VHDL architecture
    ~ Internal signal declarations
    ~ Component declarations, if the design references hierarchical components
    ~ VHDL processes, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
    ~ VHDL component instantiations, if the design is hierarchical
    ~ VHDL concurrent statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT VHDL generation
    
    ~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5
    ~ Later (subscription-based) GPT releases are expected to produce similar or better quality results
    ~ Note that ChatGPT does not always generate output exactly as expected
    
    ~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix
    
    ~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output
    ~ Examples:
    ~ Enter 'continue' to continue incomplete output to a code box
    ~ Click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
    ~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow
    ~ Type a new prompt in the ChatGPT message box and click the arrow
    ~ Notes END    ===============
    
    ~ Main prompt to ChatGPT
    Complete the following VHDL model, and output in a single formatted code box.
    
    ~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the VHDL model template.
    ~ In HDLGen-ChatGPT 'Generate > Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.
    ~***Reserved for processes***
    ~***Reserved for concurrent statements***
    
    ~ Retain VHDL comments unchanged
    Do not remove any comments beginning with '-- ', i.e, only two dashes
    
    ~ Enhance the title section text, e.g, align and format text
    ~ Remove/add the comment (~) character on the next two lines, to activate/deactivate.
    ~ Deactivation speeds up the ChatGPT HDL model completion, by removing the title section generation.
    ~ Do not include the code between and including lines '-- Title Section Start' and '-- Title Section End'.
    For each line between -- Title section start and -- Title section end, improve the text formatting
    
    For each line containing the prefix '---', generate VHDL code describing the logic, applying the following rules.
    ~ Translate model combination logic pseudo code lines which include the '---' prefix to syntactically-correct HDL.
    Remove the '--- '  prefix from the line.
    ~ Remove the --- after processing.
    
    For arithmetic operations, use type casting to support signal type requirements in ieee.numeric_std arithmetic functions.
    ~ If ChatGPT generates addOut <= addin1 + addIn0;  for std_logic_vector signals, the EDA tool may highlight an error,
    ~  such as 'Cannot determine exact overloaded match definition for "+"'
    ~ If so, re-run the above prompt
    ~ Arithmetic operations are supported by the IEEE.numeric_std library, https://redirect.cs.umbc.edu/portal/help/VHDL/packages/numeric_std.vhd
    ~ e.g, operations such as + (addition) often require input signal type conversion to support the overloaded operator functions,
    ~ + function supports the following overloaded operations
    ~ -- Id: A.3  function "+" ( L,R: UNSIGNED)           return UNSIGNED
    ~ -- Id: A.4  function "+" ( L,R: SIGNED)             return SIGNED;
    ~ -- Id: A.5  function "+" ( L: UNSIGNED; R: NATURAL) return UNSIGNED;
    ~ -- Id: A.6  function "+" ( L: NATURAL; R: UNSIGNED) return UNSIGNED;
    ~ -- Id: A.7  function "+" ( L: INTEGER; R: SIGNED)   return SIGNED;
    ~ -- Id: A.8  function "+" ( L: SIGNED; R: INTEGER)   return SIGNED;
    ~ Example: addOut <= std_logic_vector (unsigned(addin1) + unsigned(addIn0) );
    ~  Uses A.3 function "+" ( L,R: UNSIGNED) return UNSIGNED
    ~  Adds two std_logic_vector (slv) signals. Convert (type cast) slv signals to unsigned type, perform +, and then type cast the unsigned result to std_logic_vector type
    
    If a line includes a std_logic_vector signal as an array index, convert the signal to an integer index using "ieee.numeric_std" package to_integer(unsigned()).
    ~ If using a std_logic_vector signal as an integer index, convert (type cast) the signal to unsigned type,
    ~ and the unsigned signal to integer type (TO_INTEGER function D.1) and use as integer array index
    ~ -- Id: D.1  function TO_INTEGER ( ARG: UNSIGNED) return NATURAL;
    ~ -- Id: D.2  function TO_INTEGER ( ARG: SIGNED) return INTEGER;
    ~ -- Id: D.3  function TO_UNSIGNED (  ARG,SIZE: NATURAL) return UNSIGNED;
    ~ -- Id: D.4  function TO_SIGNED ( ARG: INTEGER; SIZE: NATURAL) return SIGNED;
    ~ -- Id: D.5  function TO_UNSIGNED ( ARG: STD_LOGIC_VECTOR) return UNSIGNED;
    ~ -- Id: D.6  function TO_SIGNED ( ARG: STD_LOGIC_VECTOR) return SIGNED;
    ~ -- Id: D.7  function TO_STDLOGICVECTOR ( ARG: UNSIGNED) return STD_LOGIC_VECTOR;
    ~ -- Id: D.8  function TO_STDLOGICVECTOR ( ARG: SIGNED) return STD_LOGIC_VECTOR;
    
    Convert shift_left and shift_right function outputs to signal type std_logic_vector.
    ~ Bit shift handling
    ~ This assumes that the target signal type is std_logic_vector. If not so, remove or modify the above line.
    Only use ieee.numeric_std package shift_left or shift_right functions, and do not use sra, srl, sll, shift_right_arithmetic functions, introduced in IEEE VHDL-2008
    ~ Self-explanatory
    If a line includes a >>> shift right arithmetic operation, use ieee.numeric_std package shift_right function, assuming signed data.
    ~ Use >>> pseudo code operator for shift right arithmetic operation. VHDL functions require signed input signals.
    
    Use hexadecimal signal format where the number of bits in the assignment is a multiple of 4, extending the hex value to the exact width of the target signal.
    Make assignment and equality check bit widths compatible.
    ~ Self-explanatory
    
    Leave all labels unchanged.
    ~ HDLGen-ChatGPT captures the labels for the design processes, concurrent statements and component instantiation.
    ~ Labels are used for browsing the design in the EDA tools.
    
    For each line containing '_c:' in the label, generate a concurrent VHDL statement, do not generate a process statement, do not remove the label, remove the '---', and remove '-- Default assignment'
    ~ Avoids ChatGPT translating a VHDL concurrent statement (labelled _c) into a VHDL process statement
    
    Remove all assignments in if or case statements which duplicate the default assignment.
    Include null in others case statement if a default assignment is included in a case statement
    ~ HDLGen-ChatGPT 'Architecture > process' menu uses the following menus and combinational process logic description approach
    ~ default signal assignment
    ~ non-default signal assignment
    ~ The default signal assignment is only required once. This prompt avoids ChatGPT including duplicates.
    
    For all case statements, include "when others => null;" before every occurrence of an "end case" statement.
    ~ VHDL syntax requirement
    
    Within all VHDL processes, do not remove the line containing '-- Default assignment', and place it immediately before the VHDL statements generated for lines containing prefix '--- '.
    ~ Avoids ChatGPT incorrectly re-ordering statements, and ensures the correct ordering of VHDL statements, provided in HDLGen-ChatGPT HDL template
    
    In assignments which include signals with one bit extension, e.g, (0 & CSUpr) or  (1 & CSUpr), use single quotes around the single bit value 0 or 1 and do not use double quotes "".
    For example, generate ('0' & CSUpr) from VHDL (0 & CSUpr)
    ~ Extending a signal
    ~ Example: addOut <= std_logic_vector(unsigned('0' & CSUpr) + unsigned('0' & addInB)); where addOut signal is 6-bit std_logic_vector(5 downto 0), CSRUpr / addInB signals are 5-bit std_logic_vector(4 downto 0)
    
    Do not remove any library statements, do not add any new library 'use' statements, to avoid conflicts with the ieee.numeric_std package functions.
    ~ Self explanatory
    
    Ensure that to_integer operates on unsigned signals, using the format to_integer(unsigned(signal)), not omitting the last bracket
    Ensure that to_integer operates on signed signals, using the format to_integer(signed(signal)), not omitting the last bracket
    if a std_logic_vector signal is compared to a decimal constant, convert the signal to integer format in the VHDL compare statement
    
    Only use VHDL which is supported by the IEEE VHDL-1987 standard.
    ~ Not all Electronic Design Automation (EDA) tools support VHDL-2008, so stick with VHDL-1987 standard
    
    In all VHDL processes, replace each conditional when else statement with a case statement or an if statement, without removing any signal state check, and not including any assignments which duplicate the assignment labelled '-- Default assignment'
    ~ Conditional statements are supported in IEEE VHDL-2008 though not all EDA tools support VHDL-2008, so do not allow conditional statements
    ~ ChatGPT does not always follow this prompt, so it may be necessary to submit this prompt again, after the ChatGPT run.
    
    For signal which have a digit boundary width, use hexadecimal format in constant assignments, with 'x' prefix before double quotation marks.
verilogchatgptmodelreset: | 
    ~ Notes START ===============
    ~ "~" is comment line prefix
    
    ~ 1. HDLGen-ChatGPT builds the ChatGPT HDL model completion prompt.
    ~ The prompt includes the following sections
    ~ a) ChatGPT HDL model completion prompt header, instructing ChatGPT
    ~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.
    ~ Each prompt has an accompanying explanation (in a comment)
    ~ Prompts are included which request generate of specific code output
    ~ Prompts are included which request avoidance of generating specific code output
    ~ b) HDL model template, generated by HDLGen-ChatGPT.
    
    ~ 2. The Verilog model template includes the following sections:
    ~ Title (creation date, component name, description, creator details, signal dictionary)
    ~ Verilog module declaration, describing input and output signals and their signal types
    ~ Verilog architecture
    ~ Internal signal declarations
    ~ Verilog always statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation
    ~ Verilog component instantiations, if the design is hierarchical
    ~ Verilog assign statements, possibly including logic pseudo code (marked with --- prefix) for ChatGPT Verilog generation
    
    ~ 3. HDLGen-ChatGPT (https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT)has been tested primarily using the free GPT-3.5
    ~ Later (subscription-based) GPT releases are expected to produce similar or better quality results
    ~ Note that ChatGPT does not always generate output exactly as expected
    
    ~ 4. You can modify/edit this ChatGPT HDL model completion prompt header. If so, include explanatiom using the ~ comment prefix
    
    ~ 5. Individual prompts (from this list, or new prompts) can be submitted as individual prompts, following a ChatGPT run, to refine the output
    ~ Examples:
    ~ Enter 'continue' to continue incomplete output to a code box
    ~ Click the ChatGPT menu '> Continue generating' button if it appears, to continue incomplete output to a code box
    ~ Copy any prompt from this file and paste in the ChatGPT message box and click the arrow
    ~ Type a new prompt in the ChatGPT message box and click the arrow
    ~ Notes END    ===============
    
    ~ Main prompt to ChatGPT
    Complete the following Verilog model, and output in a single formatted code box.
    
    ~ The next lines are auto-populated by HDLGen-ChatGPT, based on process and concurrent statements in the Verilog model template.
    ~ In HDLGen-ChatGPT 'Generate > Edit ChatGPT Prompt Header' menu, uncomment one of the following lines to output a specific selected process or concurrent statement.
    ~***Reserved for processes***
    ~***Reserved for concurrent statements***
    
    For each line between // Title section start and // Title section end, improve formatting of the text.
    
    Do not include input or output keywords in the module declaration
    
    For each line containing the prefix '///', generate Verilog code describing the logic, applying the following rules.
    ~ Translate model combination logic pseudo code lines which include the '///' prefix to syntactically-correct HDL.
    Remove the '/// '  prefix from the line.
    ~ Remove the /// after processing.
    
    Leave all labels unchanged.
    ~ Labels are used for browsing the design in the EDA tools.
    
    In initial statements, place the Verilog line containing '// Default assignment', unchanged, and immediately before the Verilog logic generated for lines containing prefix '///'.
    ~ self-explanatory
    
    Do not include an initial statement for a signal, if an assign statement is included in the Verilog model template.
    ~ For each assign statement, generate a Verilog assign statement, remove '// Default assignment' if it exists.
    
    In VERILOG initial statements, do not remove the line containing suffix '// Default assignment', and place it immediately before the VERILOG statements generated for lines containing prefix '/// '.
    Place the line containing suffix '// Default assignment' immediately before the VERILOG if statement in lines containing prefix '///'.
    
    Make assignment and equality check bit widths compatible.
    
    Only use Verilog which is supported by the Verilog-1995 (IEEE Standard 1364-1995) standard.
    
    Keep all { and } characters in the generated Verilog
    
    Keep case assignments separate, as specified in the ChatGPT prompt.
    
    For <<< shift right arithmetic assignment, apply the shift operation on the signed signal value, using $signed()
    
    Remove all lines which contain default:
    ~ Notes START ===============
    ~ "~" is comment line prefix
    
    ~ 1. HDLGen-ChatGPT builds the ChatGPT testbench HDL stimulus and signal checking generation prompt.
    ~ The prompt includes the following sections
    ~ a) ChatGPT testbench HDL stimulus and signal checking generation header, instructing ChatGPT
    ~ The prompts included in this file have been developed following testing on a range or combinational, sequential and hierarchical designs.
    ~ Each prompt has an accompanying explanation (in a comment)
    ~ Prompts are included which request generate of specific code output
    ~ Prompts are included which request avoidance of generating specific code output
    ~ b) Verilog testbench signals
    ~ c) Test table
    ~ Notes END    ===============
    
    The table is included at the end of the prompt.
    
    ~ FM Not currently used
    ~ If the table includes a TAB, output message "Table includes TABs" and stop
    ~ If the table does not include a TAB, continue.
    
    ~ Define the table structure. The Test Table (excluding the header section) is pasted in the Test Table UI.
    The format of the table is as follows
    Row 1 includes input signal name headings
    Row 2 includes radix for input signals
    Row 2 includes output signal name headings
    Row 2 includes radix for output signals
    Row 5 includes the following column headings
    Column 1: TestNo
    Column 2: delay
    Other:    Note
    Rows 6 onwards includes columns with values: TestNo, delay, input signal values, expected output signal values, Note
    
    Output a single formatted code box, including the following:
    List all input signal names in the code box, as a Verilog comment.
    List all output signal names in the code box, as a Verilog comment.
    
    Output a single Verilog process labelled stim_p, including the following elements (1-5), for each TestNo, though not including a for loop
    1. Integer signal TestNo assignment.
    2. Note column field, as a Verilog comment.
    3. Only for input signals: assign each input signal (omitting no input signals) to the value in its corresponding 'input' column, using the corresponding signal radix in the assignment. Do not assign any output signal values.
    4. Delay statement, format '# (delay * period);', where delay is an integer or real value, never 0, placing the delay statement after all of the signal stimulus for the TestNo have been assigned, and always including brackets around the delay statement.
    5. Perform the following points a. to d.
    a. Compare each output signal with its corresponding value in the output signal column
    b. Output a separate warning message for each signal, if a test fails.
    c. Include TestNo and signal value in the message
    d. Do not test any input signals.
    
    ~ FM review
    For all input signals, ensure use of the correct values and the correct signal widths.
    
    ~ Prompts which request avoidance of generating specific code output
    Never include the term 0'b0.
    Do not include any Verilog loops in the output.
    Do not assign any output signals.
    Do not include 'case TestNo' in the output.
    Do not include any other delay statements.
    Do not request that I '-- Continue with the remaining test cases...'. Please output code for all of the tests.
    Do not request that I '-- Repeat similar sections for the remaining tests...'. Please output code for all of the tests.
    Do not request that I '-- Comparison of output signals with expected values...'. Please output code for all of the tests.
    Do not request that I '-- Continue similar sections for the remaining tests...'. Please output code for all of the tests.